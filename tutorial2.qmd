---
title: "tutorial2"
format: html
editor: visual
---

## 

```{r}

library(tidyverse)
library(forcats)
library(patchwork)
sales <- read_csv("https://raw.githubusercontent.com/hadley/sfhousing/master/house-sales.csv")
```

This data is tidy form.

```{r}
names(sales)
str()
glimpse()

```

categorical variables: country, city, zip, street

numerical variables: price, br, lsqft, bsqft

temporal variables: year, date, date sold

For numeric variables:

|  |  |  |  |  |  |  |  |  |
|--------|--------|--------|--------|--------|--------|--------|--------|--------|
|  |  |  |  |  |  |  |  |  |
|  | Plot type |  | What it shows |  | R example |  | Python/pandas-seaborn example |  |
|  |  |  |  |  |  |  |  |  |
|  | **Histogram** |  | Frequency distribution (binned counts) |  | `ggplot(df, aes(x = num)) + geom_histogram()` |  | `sns.histplot(df['num'])` |  |
|  |  |  |  |  |  |  |  |  |
|  | **Density plot** |  | Smoothed estimate of the distribution |  | `geom_density()` |  | `sns.kdeplot(df['num'])` |  |
|  |  |  |  |  |  |  |  |  |
|  | **Boxplot** |  | Center, spread, and outliers |  | `geom_boxplot()` |  | `sns.boxplot(x=df['num'])` |  |
|  |  |  |  |  |  |  |  |  |
|  | **Violin plot** |  | Density + boxplot combined |  | `geom_violin()` |  | `sns.violinplot(x=df['num'])` |  |
|  |  |  |  |  |  |  |  |  |
|  | **Scatterplot** |  | Relationship between two numeric variables |  | `geom_point(aes(y = num2))` |  | `sns.scatterplot(x='num', y='num2', data=df)` |  |
|  |  |  |  |  |  |  |  |  |
|  | **Line plot** |  | Trends over a continuous or ordered index |  | `geom_line(aes(y = num2))` |  | `sns.lineplot(x='time', y='num', data=df)` |  |
|  |  |  |  |  |  |  |  |  |

For categorical variables:

|  |  |  |  |  |  |  |  |  |
|--------|--------|--------|--------|--------|--------|--------|--------|--------|
|  |  |  |  |  |  |  |  |  |
|  | Plot type |  | What it shows |  | R example |  | Python/pandas-seaborn example |  |
|  |  |  |  |  |  |  |  |  |
|  | **Bar chart** |  | Counts (or pre-aggregated summaries) |  | `geom_bar(aes(x = cat))` |  | `sns.countplot(x='cat', data=df)` |  |
|  |  |  |  |  |  |  |  |  |
|  | **Proportion bar (100%)** |  | Relative frequencies across categories |  | `geom_bar(aes(x=1, fill=cat), position="fill")` |  | `pd.crosstab(...).plot(kind='bar', stacked=True)` |  |
|  |  |  |  |  |  |  |  |  |
|  | **Mosaic plot** |  | Joint distributions of two categoricals |  | `vcd::mosaic(~ cat1 + cat2, data=df)` |  | `from statsmodels.graphics.mosaicplot import mosaic; mosaic(df, ['cat1','cat2'])` |  |
|  |  |  |  |  |  |  |  |  |
|  | **Pie chart** |  | Proportions (use sparingly) |  | `coord_polar(theta='y') + geom_bar(...)` |  | `df['cat'].value_counts().plot.pie()` |  |
|  |  |  |  |  |  |  |  |  |

For a categorical and numerical variables

-   **Boxplot by category**

-   **Violin plot by category**

-   **Jittered stripplot overlaid on box/violin**

-   **Point + error‐bar plot**

```{r}
library(ggplot2)

# example data frame
df <- data.frame(
  category = rep(c("A", "B", "C"), each = 100),
  value    = c(rnorm(100, mean = 0,  sd = 1),
               rnorm(100, mean = 2,  sd = 0.5),
               rnorm(100, mean = 1,  sd = 1.5))
)

ggplot(df, aes(x = category, y = value)) +
  geom_violin(trim = FALSE) +
  geom_boxplot(width = 0.1, fill = "white") +
  labs(
    title = "Sample Violin Plot",
    x     = "Category",
    y     = "Value"
  ) +
  theme_minimal()

```

```{r echo=false}
library(ggplot2)

df1 <- sales |> mutate(avg_price = as.Date(date, format =" %Y-%m-%d")) |>
  mutate(week_start = floor_date(date, unit = "week",week_start = 1))|>
  group_by(week_start)|>
  summarize(avg_price = mean(price,na.rm=TRUE),
    .group="drop") |> arrange(week_start) 

print(df1)

ggplot(df1, aes(x = week_start, y = avg_price))+
  geom_line()+
  labs(y= "Average price(millions)")
```


```{r}
# Example data
# df <- data.frame(
#   sale_time = c("2025-07-28 10:15", "2025-07-28 13:30",
#                 "2025-07-29 09:00", "2025-08-03 17:45"),
#   price     = c(100, 150, 200, 130)
# )
df2 <- sales %>%
  # 1. parse your sale_time into a Date or POSIXct
  #mutate(sale_time = ymd_hm(datesold)) %>%           # if “YYYY-MM-DD HH:MM”
 mutate(sale_time = as.Date(date))|>     # if already “YYYY-MM-DD”

  # 2. derive the time‐bucket you want:
  #    a) daily:
  #mutate(sale_date = as.Date(date)) %>%
  #    b) weekly (Mon–Sun):
  mutate(week_start = floor_date(date, "week", week_start = 1)) %>%
  #    c) monthly:
  #mutate(month     = floor_date(date, "month")) %>%

  # 3. pick one (here week_start) and count
  group_by(week_start) %>%
  summarise(
    sales_number = n(),        # total # of rows in each week
    .groups = "drop"
  ) %>%
  arrange(week_start)

# View the weekly sales counts
print(df2)

  
ggplot(df2, aes(x= week_start, y = sales_number))+
  geom_line()+
  labs(y= "Number of sales")
```
